{"mappings":"AAAA,qBAAqB;AAErB,kFAAkF;AAClF,oCAAoC;AACpC,cAAc;AACd,iCAAiC;AACjC,2BAA2B;AAC3B,gCAAgC;AAChC,sCAAsC;AACtC,+CAA+C;AAC/C,2CAA2C;AAC3C,8CAA8C;AAC9C,gDAAgD;AAChD,+CAA+C;AAC/C,iDAAiD;AAEjD,8BAA8B;AAC9B,kDAAkD;AAClD,qDAAqD;AAErD,+DAA+D;AAC/D,2CAA2C;AAC3C,sCAAsC;AACtC,wCAAwC;AACxC,UAAU;AACV,gCAAgC;AAChC,6BAA6B;AAC7B,6BAA6B;AAC7B,8BAA8B;AAC9B,SAAS;AACT,OAAO;AACP,+BAA+B;AAC/B,MAAM;AACN,+BAA+B;AAC/B,IAAI;AACJ,KAAK;AAEL,qCAAqC;AACrC,yBAAyB;AACzB,sDAAsD;AACtD,oCAAoC;AACpC,2BAA2B;AAC3B,IAAI;AACJ,kBAAkB;AAClB,GAAG;AAEH,SAAS,gBAAgB,CAAC,oBAAoB;IAC7C,MAAM,WACJ,IAAI,CAAC,CAAA,WAAY,SAAS,IAAI,IAC9B,IAAI,CAAC,CAAA;QACL,wFAAwF;QACvF,MAAM,SAAS,IAAI;QACpB,MAAM,MAAM,OAAO,eAAe,CAAC,MAAM;QACzC,MAAM,QAAQ,MAAM,IAAI,CAAC,IAAI,gBAAgB,CAAC;QAC9C,MAAM,aAAa,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,IAAI,EAAE,MAAM,CAAC,CAAA,OAAQ,yBAAyB,IAAI,CAAC;QAE7F,IAAI,WAAW,MAAM,KAAK,GAAG;YAC5B,QAAQ,KAAK,CAAC;YACd;QACD;QAEA,qFAAqF;QACpF,iDAAiD;QACjD,MAAM,eAAe,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE;QAEvD,MAAM,cACJ,IAAI,CAAC,CAAA,WAAY,SAAS,IAAI,IAC9B,IAAI,CAAC,CAAA;YACL,MAAM,MAAM,IAAI,eAAe,CAAC;YAChC,MAAM,MAAM,IAAI;YAChB,IAAI,MAAM,GAAG;gBACZ,KAAK,OAAO,CAAC,KAAK;oBACjB,MAAM,cAAc,KAAK,UAAU,CAAC,IAAI;oBACxC,MAAM,WAAW,YAAY,QAAQ;oBACrC,MAAM,WAAW,YAAY,WAAW;oBACxC,MAAM,YAAY,YAAY,YAAY;oBAC1C,MAAM,SAAS,YAAY,cAAc;oBACzC,MAAM,UAAU,YAAY,eAAe;oBAE3C,qBAAqB;oBACrB,MAAM,MAAM,eAAe,UAAU;oBACrC,MAAM,OAAO,eAAe,WAAW;oBAEvC,SAAS,cAAc,CAAC,kBAAkB,SAAS,GAAG,CAAC;kBAC5C,EAAE,IAAI;4BACI,EAAE,SAAS;4BACX,EAAE,IAAI;6BACL,EAAE,KAAK;QAC5B,CAAC;gBACH;YACD;YACA,IAAI,GAAG,GAAG;QACX,GACC,KAAK,CAAC,CAAA,QAAS,QAAQ,KAAK,CAAC,2CAA2C;IAC3E,GACC,KAAK,CAAC,CAAA,QAAS,QAAQ,KAAK,CAAC,wCAAwC;AACxE;AAEA,SAAS,eAAe,GAAG,EAAE,GAAG;IAC/B,IAAI,CAAC,KAAK,OAAO;IACjB,MAAM,UAAU,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,EAAE,GAAG;IAChD,IAAI,QAAQ,OAAO,QAAQ,KAC1B,OAAO,UAAU;IAElB,OAAO;AACR","sources":["imgInfo.js"],"sourcesContent":["// extract image info\n\n//document.getElementById('imgInput').addEventListener('change', function(event) {\n//\tvar file = event.target.files[0];\n//\tif (file) {\n//\t\treader.onload = function(e) {\n//\t\t\tvar img = new Image();\n//\t\t\timage.onload = function() {\n//\t\t\t\tEXIF.getData(image, function() {\n//\t\t\t\t\tvar allMetaData = EXIF.getAllTags(this);\n//\t\t\t\t\tvar dateTime = allMetaData.DateTime;\n//\t\t\t\t\tvar latitude = allMetaData.GPSLatitude;\n//\t\t\t\t\tvar longitude = allMetaData.GPSLongitude;\n//\t\t\t\t\tvar latRef = allMetaData.GPSLatitudeRef;\n//\t\t\t\t\tvar longRef = allMetaData.GPSLongitudeRef;\n\n//\t\t\t\t\t//converting to decimal\n//\t\t\t\t\tvar lat = convertDMSToDD(latitude, latRef);\n//\t\t\t\t\tvar long = convertDMSToDD(longitude, longRef);\n\n//\t\t\t\t\tdocument.getElemnentByID('photoContainer').innerHTML = `\n//\t\t\t\t\t\t<p><b>DateTime:</b> ${dateTime}</p>\n//\t\t\t\t\t\t<p><b>Latitude:</b> ${lat}</p>\n//\t\t\t\t\t\t<p><b>Longitude:</b> ${long}</p>\n//\t\t\t\t\t\t`;\n//\t\t\t\t\tconsole.log(allMetaData);\n//\t\t\t\t\tconsole.log(dateTime);\n//\t\t\t\t\tconsole.log(latitude);\n//\t\t\t\t\tconsole.log(longitude);\n//\t\t\t\t});\n//\t\t\t};\n//\t\t\timg.src = e.target.result;\n//\t\t};\n//\t\treader.readAsDataURL(file);\n//\t}\n//});\n\n//function convertDMSToDD(dms, ref) {\n//\tif (!dms) return null;\n//\tvar degrees = dms[0] + dms[1] / 60 + dms[2] / 3600;\n//\tif (ref === \"S\" || ref === \"W\") {\n//\t\tdegrees = degrees * -1;\n//\t}\n//\treturn degrees;\n//}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n\tfetch('/assets')\n\t\t.then(response => response.text())\n\t\t.then(data => {\n\t\t\t// Assuming the server provides a directory listing, parse the HTML to find image files.\n\t\t\t\tconst parser = new DOMParser();\n\t\t\tconst doc = parser.parseFromString(data, 'text/html');\n\t\t\tconst links = Array.from(doc.querySelectorAll('a'));\n\t\t\tconst imageFiles = links.map(link => link.href).filter(href => /\\.(jpg|jpeg|png|gif)$/i.test(href));\n\n\t\t\tif (imageFiles.length === 0) {\n\t\t\t\tconsole.error('No images found');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For simplicity, let's assume the server lists files in order of modification time.\n\t\t\t\t// Fetch the last image in the directory listing.\n\t\t\t\tconst lastImageUrl = imageFiles[imageFiles.length - 1];\n\n\t\t\tfetch(lastImageUrl)\n\t\t\t\t.then(response => response.blob())\n\t\t\t\t.then(blob => {\n\t\t\t\t\tconst url = URL.createObjectURL(blob);\n\t\t\t\t\tconst img = new Image();\n\t\t\t\t\timg.onload = function() {\n\t\t\t\t\t\tEXIF.getData(img, function() {\n\t\t\t\t\t\t\tconst allMetaData = EXIF.getAllTags(this);\n\t\t\t\t\t\t\tconst dateTime = allMetaData.DateTime;\n\t\t\t\t\t\t\tconst latitude = allMetaData.GPSLatitude;\n\t\t\t\t\t\t\tconst longitude = allMetaData.GPSLongitude;\n\t\t\t\t\t\t\tconst latRef = allMetaData.GPSLatitudeRef;\n\t\t\t\t\t\t\tconst longRef = allMetaData.GPSLongitudeRef;\n\n\t\t\t\t\t\t\t// Convert to decimal\n\t\t\t\t\t\t\tconst lat = convertDMSToDD(latitude, latRef);\n\t\t\t\t\t\t\tconst long = convertDMSToDD(longitude, longRef);\n\n\t\t\t\t\t\t\tdocument.getElementById('photoContainer').innerHTML = `\n\t\t\t\t\t\t\t\t<img src=\"${url}\" alt=\"Last Modified Image\" />\n\t\t\t\t\t\t\t\t<p><b>DateTime:</b> ${dateTime}</p>\n\t\t\t\t\t\t\t\t<p><b>Latitude:</b> ${lat}</p>\n\t\t\t\t\t\t\t\t<p><b>Longitude:</b> ${long}</p>\n\t\t\t\t\t\t\t\t`;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\timg.src = url;\n\t\t\t\t})\n\t\t\t\t.catch(error => console.error('Error fetching the last modified image:', error));\n\t\t})\n\t\t.catch(error => console.error('Error fetching the assets directory:', error));\n});\n\nfunction convertDMSToDD(dms, ref) {\n\tif (!dms) return null;\n\tconst degrees = dms[0] + dms[1] / 60 + dms[2] / 3600;\n\tif (ref === \"S\" || ref === \"W\") {\n\t\treturn degrees * -1;\n\t}\n\treturn degrees;\n}\n\n"],"names":[],"version":3,"file":"index.41db75e8.js.map","sourceRoot":"/__parcel_source_root/"}