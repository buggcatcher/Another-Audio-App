{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,IAAI,MAAM,EAAE,GAAG,CAAC,OAAO,OAAO,CAAC;QAAC;QAAM;KAAK,EAAE;IAE7C,mCAAmC;IACnC,EAAE,SAAS,CAAC,sDAAsD;QAC9D,SAAS;QACT,aAAa;IACjB,GAAG,KAAK,CAAC;IAET,6CAA6C;IAC7C,IAAI,UAAU,EAAE;IAEhB,qBAAqB;IACrB,SAAS;QACL,QAAQ,OAAO,CAAC,SAAS,MAAM;YAC3B,OAAO,KAAK,CAAC;QACjB;IACJ;IAEA,0BAA0B;IAC1B,SAAS;QACL,QAAQ,OAAO,CAAC,SAAS,MAAM;YAC3B,IAAI,WAAW,CAAC;QACpB;IACJ;IAEA,4DAA4D;IAC5D,eAAe,WAAW,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK;QACpD,+CAA+C;QAC/C,IAAI,SAAS,EAAE,MAAM,CAAC,QAAQ,SAAS,CAAC,QAAQ,OAAO;QACvD,QAAQ,IAAI,CAAC;QACb,OAAO,KAAK,CAAC;QAEb,mCAAmC;QACnC,IAAI,gBAAgB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,eAAe,EAAE;QACrE,cAAc,IAAI,CAAC;YAAE,MAAM;YAAM,QAAQ;QAAO;QAChD,aAAa,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC;QAE/C,mCAAmC;QACnC,IAAI;YACA,MAAM,SAAS,MAAM,YAAY,MAAM,WAAW;YAClD,QAAQ,GAAG,CAAC,gBAAgB;QAChC,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,uBAAuB;QACzC;IACJ;IAEA,8CAA8C;IAC9C;IAEA,sBAAsB;IACtB,SAAS,cAAc,CAAC,kBAAkB,gBAAgB,CAAC,SAAS;QAChE,IAAI,UAAU,WAAW,EACrB,UAAU,WAAW,CAAC,kBAAkB,CAAC,eAAe,QAAQ;YAC5D,IAAI,SAAS;gBAAC,SAAS,MAAM,CAAC,QAAQ;gBAAE,SAAS,MAAM,CAAC,SAAS;aAAC;YAClE,IAAI,aAAa,OAAO;YACxB,IAAI,YAAY;gBACZ,iCAAiC;gBACjC,IAAI,YAAY,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,GAAG,IAAI,OAAO,CAAC,KAAK;gBAEnE,iCAAiC;gBACjC,4DAA4D;gBAC5D,IAAI,QAAQ,MAAM;gBAElB,qEAAqE;gBACrE,WAAW,YAAY,QAAQ,WAAW,QAAQ,gDAAgD;gBAClG,IAAI,OAAO,CAAC,QAAQ,KAAK,oCAAoC;YACjE;QACJ,GAAG,SAAS,KAAK;YACb,MAAM,6CAA6C,MAAM,OAAO;QACpE;aAEA,MAAM;IAEd;IAEA,6CAA6C;IAC7C,SAAS;QACL,IAAI,gBAAgB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,eAAe,EAAE;QACrE,cAAc,OAAO,CAAC,SAAS,UAAU;YACrC,IAAI,SAAS,EAAE,MAAM,CAAC,WAAW,MAAM,EAAE,SAAS,CAAC,QAAQ,WAAW,IAAI,GAAG;YAC7E,QAAQ,IAAI,CAAC;QACjB;QACA,cAAc,qBAAqB;IACvC;IAEA,4CAA4C;IAC5C,IAAI,EAAE,CAAC,WAAW;QACd,IAAI,cAAc,IAAI,OAAO;QAC7B,IAAI,eAAe,IACf,cAAc,6BAA6B;aAE3C,iBAAiB,iCAAiC;IAE1D;AACJ;AAEA,6BAA6B;AAC7B,eAAe;IACX,sDAAsD;IACtD,4DAA4D;IAC5D,OAAO;AACX;AAEA,6CAA6C;AAC7C,eAAe,YAAY,QAAQ,EAAE,SAAS,EAAE,KAAK;IACjD,MAAM,SAAS,MAAM,KAAK,KAAK,CAAC,CAAC;4EACuC,CAAC,EAAE;QAAC;QAAU;QAAW;KAAM;IAEvG,OAAO;AACX","sources":["script.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\r\n    var map = L.map('map').setView([43.8, 11.2], 13);\r\n\r\n    // Add a base layer (OpenStreetMap)\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        maxZoom: 19,\r\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\r\n    }).addTo(map);\r\n\r\n    // Initialize an empty array to store markers\r\n    var markers = [];\r\n\r\n    // Add markers to map\r\n    function addMarkers() {\r\n        markers.forEach(function(marker) {\r\n            marker.addTo(map);\r\n        });\r\n    }\r\n\r\n    // Remove markers from map\r\n    function removeMarkers() {\r\n        markers.forEach(function(marker) {\r\n            map.removeLayer(marker);\r\n        });\r\n    }\r\n\r\n    // Function to save marker data to localStorage and database\r\n    async function saveMarker(name, latlng, timestamp, photo) {\r\n        // Add marker to map and store in markers array\r\n        var marker = L.marker(latlng).bindPopup('<b>' + name + '</b><br><a href=\"gallery.html\">View Photos</a>');\r\n        markers.push(marker);\r\n        marker.addTo(map);\r\n\r\n        // Save marker data to localStorage\r\n        var storedMarkers = JSON.parse(localStorage.getItem('markers')) || [];\r\n        storedMarkers.push({ name: name, latlng: latlng });\r\n        localStorage.setItem('markers', JSON.stringify(storedMarkers));\r\n\r\n        // Save marker data to the database\r\n        try {\r\n            const result = await createPhoto(name, timestamp, photo);\r\n            console.log('Photo saved:', result);\r\n        } catch (error) {\r\n            console.error('Error saving photo:', error);\r\n        }\r\n    }\r\n\r\n    // Load markers from localStorage if available\r\n    loadMarkers();\r\n\r\n    // Button to add photo\r\n    document.getElementById('addPhotoButton').addEventListener('click', function() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(async function(position) {\r\n                var latlng = [position.coords.latitude, position.coords.longitude];\r\n                var markerName = prompt(\"Enter a name for this marker:\");\r\n                if (markerName) {\r\n                    // Generate the current timestamp\r\n                    var timestamp = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n\r\n                    // Placeholder for the photo data\r\n                    // Replace this with your actual logic to get the photo data\r\n                    var photo = await getPhotoData();\r\n\r\n                    // Add a marker at the user's current location with the provided name\r\n                    saveMarker(markerName, latlng, timestamp, photo); // Save marker data to localStorage and database\r\n                    map.setView(latlng, 13); // Center map on the user's location\r\n                }\r\n            }, function(error) {\r\n                alert(\"Unable to retrieve your location due to \" + error.message);\r\n            });\r\n        } else {\r\n            alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n    });\r\n\r\n    // Function to load markers from localStorage\r\n    function loadMarkers() {\r\n        var storedMarkers = JSON.parse(localStorage.getItem('markers')) || [];\r\n        storedMarkers.forEach(function(markerData) {\r\n            var marker = L.marker(markerData.latlng).bindPopup('<b>' + markerData.name + '</b><br><a href=\"gallery.html\">View Photos</a>');\r\n            markers.push(marker);\r\n        });\r\n        addMarkers(); // Add markers to map\r\n    }\r\n\r\n    // Add or remove markers based on zoom level\r\n    map.on('zoomend', function() {\r\n        var currentZoom = map.getZoom();\r\n        if (currentZoom >= 15) {\r\n            addMarkers(); // Add markers when zoomed in\r\n        } else {\r\n            removeMarkers(); // Remove markers when zoomed out\r\n        }\r\n    });\r\n});\r\n\r\n// Function to get photo data\r\nasync function getPhotoData() {\r\n    // Placeholder function to simulate getting photo data\r\n    // Replace this with your actual logic to get the photo data\r\n    return 'photo_data_placeholder';\r\n}\r\n\r\n// Function to create a photo in the database\r\nasync function createPhoto(localita, timestamp, photo) {\r\n    const result = await pool.query(`\r\n        INSERT INTO photos (localita, timestamps, immagine) VALUES (?, ?, ?)`, [localita, timestamp, photo]\r\n    );\r\n    return result;\r\n}"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}